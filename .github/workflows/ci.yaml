name: Tests
on:
  pull_request:
  push:
    branches:
      - master

jobs:
  tests:
    name: Tests
    runs-on: ${{ matrix.os }}
    if: "!contains(github.event.head_commit.message, 'ci skip') && !contains(github.event.head_commit.message, 'skip ci')"

    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-latest
          - ubuntu-latest
          - windows-latest

    env:
      RUSTFLAGS: -D warnings
      CARGO_INCREMENTAL: 1
      RUSTUP_MAX_RETRIES: 10
      CARGO_NET_RETRY: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # We need to disable the existing toolchain to avoid updating rust-docs
      # which takes a long time. The fastest way to do this is to rename the
      # existing folder, as deleting it takes about as much time as not doing
      # anything and just updating rust-docs.
      - name: Rename existing rust toolchain (Windows)
        if: matrix.os == 'windows-latest'
        run: mv -f /C/Users/runneradmin/.rustup/toolchains/stable-x86_64-pc-windows-msvc /C/Users/runneradmin/.rustup/toolchains/stable-x86_64-pc-windows-msvc.old

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          components: rustfmt, clippy

      - if: matrix.os == 'ubuntu-latest'
        run: sudo chown -R $(whoami):$(id -ng) ~/.cargo/

      - id: cargo-deps
        name: (load cache) Download dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry/cache
            ~/.cargo/git
          key: cargo-deps-${{ runner.os }}-${{ hashFiles('Cargo.lock') }}

      - if: ${{ steps.cargo-deps.outputs.cache-hit != 'true' }}
        name: Download dependencies
        run: cargo fetch --locked

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Test
        run: cargo test --all --no-fail-fast

      - name: Run clippy
        run: cargo clippy --tests --examples -- -Dwarnings

  coverage:
    name: "Coverage"
    runs-on: ${{ matrix.os }}
    if: "!contains(github.event.head_commit.message, 'ci skip') && !contains(github.event.head_commit.message, 'skip ci')"

    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: true
      matrix:
        os:
          - ubuntu-latest

    env:
      CARGO_INCREMENTAL: 0
      RUSTFLAGS: "-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Zpanic_abort_tests"
      RUSTDOCFLAGS: "-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Zpanic_abort_tests"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true

      - name: cargo clean
        run: cargo clean

      - name: get latest grcov binary
        uses: dsaltares/fetch-gh-release-asset@0.0.5
        with:
          repo: mozilla/grcov
          version: "latest"
          file: grcov-linux-x86_64.tar.bz2

      - name: unpack grcov release binary
        run: |
          tar -xvf grcov-linux-x86_64.tar.bz2
          sudo chown runner ./grcov && chmod +x ./grcov
          cp grcov ~/.cargo/bin/grcov
          rm grcov-linux-x86_64.tar.bz2

      - name: cargo build tests +profile
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-fail-fast --all

      - id: coverage
        name: coverage analysis with grcov
        uses: actions-rs/grcov@v0.1
        with:
          config: .github/grcov.yml

      - name: make report artifact
        uses: actions/upload-artifact@v1
        with:
          name: code-coverage-report
          path: ${{ steps.coverage.outputs.report }}

      - name: upload report to Coveralls
        uses: coverallsapp/github-action@v1.1.2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ${{ steps.coverage.outputs.report }}

  wasm:
    name: Wasm
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        rust:
          - "1.45.0"
        crate:
          - disassembler

    env:
      RUSTFLAGS: -D warnings
      CARGO_INCREMENTAL: 1
      RUSTUP_MAX_RETRIES: 10
      CARGO_NET_RETRY: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          target: wasm32-unknown-unknown
          override: true

      - name: Build ${{ matrix.crate }}
        run: cargo build -p ${{ matrix.crate }} --lib --target wasm32-unknown-unknown --release

      # - name: Install wasm-bindgen tool
      #   continue-on-error: true
      #   run: cargo install wasm-bindgen-cli or use wasm-pack

      - uses: jetli/wasm-bindgen-action@v0.1.0
        with:
          version: "0.2.70"

      - name: Gen JS/TS API
        run: |
          wasm-bindgen target/wasm32-unknown-unknown/release/${{ matrix.crate }}.wasm --out-dir ./dist_${{ matrix.crate }} --no-modules --no-modules-global ${{ matrix.crate }}
          wasm-bindgen target/wasm32-unknown-unknown/release/${{ matrix.crate }}.wasm --out-dir ./dist_${{ matrix.crate }}/js-modules
      # - name: Install wasm-pack toolchain
      #   run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      # - name: Test in Chrome
      #   run: wasm-pack test --headless --chrome
      # - name: Test in Firefox
      #   run: wasm-pack test --headless --firefox
      # - name: Test in Safari
      #   run: wasm-pack test --headless --safari
