name: Build Release Ext
on:
  workflow_run:
    workflows: [Create Release Page]
    types: [completed]

env:
  RUSTFLAGS: -D warnings
  CARGO_INCREMENTAL: 0
  RUSTUP_MAX_RETRIES: 10
  CARGO_NET_RETRY: 10

jobs:
  release:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: get release info
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: ${{ github.event.workflow_run.workflow_id }}
          run_id: ${{ github.event.workflow_run.id }}
          name: release assets url
      - name: read release info
        id: release
        run: |
          echo ::set-output name=tag::$(cat release-upload.url | cut -d \  -f 1)
          echo ::set-output name=upload_url::$(cat release-upload.url | cut -d \  -f 2)
    outputs:
      tag: ${{ steps.release.outputs.tag }}
      upload_url: ${{ steps.release.outputs.upload_url }}

  wasm:
    name: WASM Lib
    needs: release
    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        crate:
          - decompiler

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          target: wasm32-unknown-unknown
          override: true

      - name: Get crate version
        id: version
        uses: ./.github/actions/crate-version
        with:
          crate: ${{ matrix.crate }}

      - name: "Install tools: binaryen"
        id: tools
        env:
          VERSION: version_97
        run: |
          TARBALL=binaryen-$VERSION-x86_64-linux.tar.gz
          curl -L \
            "https://github.com/WebAssembly/binaryen/releases/download/$VERSION/$TARBALL" \
            -o ./binaryen
          tar -xzf binaryen
          binaryen-$VERSION/bin/wasm-opt --version
          echo "::set-output name=wasmopt::$PWD/binaryen-$VERSION/bin/wasm-opt"

      - name: "Install tools: wasm-snip"
        uses: actions-rs/install@v0.1
        with:
          crate: wasm-snip
          version: latest
          use-tool-cache: true

      - name: "Install tools: wasm-bindgen"
        uses: jetli/wasm-bindgen-action@v0.1.0
        with:
          version: "0.2.78"

      - name: Build ${{ matrix.crate }}
        run: cargo build -p ${{ matrix.crate }} --lib --target wasm32-unknown-unknown --release

      - name: prepare dist
        id: dist
        run: |
          PKGNAME="move-${{ matrix.crate }}-${{ steps.version.outputs.version }}-wasm32"
          mkdir $PKGNAME
          echo "::set-output name=name::$PKGNAME"
          echo "::set-output name=path::./$PKGNAME"

      - name: Generate js/ts bindings (no-modules)
        run: >
          wasm-bindgen target/wasm32-unknown-unknown/release/${{ matrix.crate }}.wasm
          --out-dir ${{ steps.dist.outputs.path }}
          --no-modules
          --no-modules-global ${{ matrix.crate }}
      - name: Generate js/ts bindings (modules)
        run: >
          wasm-bindgen target/wasm32-unknown-unknown/release/${{ matrix.crate }}.wasm
          --out-dir ${{ steps.dist.outputs.path }}/js-modules

      - name: Prepare optimize build
        run: >
          wasm-snip --snip-rust-panicking-code
          --skip-producers-section ${{ steps.dist.outputs.path }}/${{ matrix.crate }}_bg.wasm
          -o ${{ steps.dist.outputs.path }}/${{ matrix.crate }}_bg.wasm

      - name: Finally optimize build
        run: >
          ${{ steps.tools.outputs.wasmopt }} ${{ steps.dist.outputs.path }}/${{ matrix.crate }}_bg.wasm
          -o ${{ steps.dist.outputs.path }}/${{ matrix.crate }}_bg.wasm
          --enable-mutable-globals --dce -Oz --enable-gc --enable-reference-types -c

      - id: archive
        name: archive
        uses: ./.github/actions/archive
        with:
          name: ${{ steps.dist.outputs.name }}
          path: ${{ steps.dist.outputs.path }}

      - name: Upload artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_name: ${{ steps.archive.outputs.name }}
          asset_path: ./${{ steps.archive.outputs.path }}
          asset_content_type: application/gzip

  cffi:
    name: C-Lib with CFFI
    needs: release
    runs-on: ${{ matrix.os.name }}

    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        os:
          - name: ubuntu-latest
            platform: linux
            lib-pre: lib
            lib-ext: so
          - name: macos-latest
            platform: darwin
            lib-pre: lib
            lib-ext: dylib
          - name: windows-latest
            platform: win # gnu,mingw64
            lib-pre: ""
            lib-ext: dll
        crate:
          - name: decompiler
            path: ./lang/decompiler
            mod: src/ext/cffi.rs

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Get crate version
        id: version
        uses: ./.github/actions/crate-version
        with:
          crate: ${{ matrix.crate.name }}

      - name: "Install tools: cbindgen"
        uses: actions-rs/install@v0.1
        with:
          crate: cbindgen
          version: latest
          use-tool-cache: true

      - name: Build ${{ matrix.crate.name }}
        run: |
          cd ${{ matrix.crate.path }}
          cargo build -p ${{ matrix.crate.name }} --lib --features cffi --release

      - name: prepare dist
        id: dist
        env:
          PKGNAME_PART: cdynlib-${{ matrix.crate.name }}-${{ steps.version.outputs.version }}-${{ matrix.os.platform }}
        run: |
          PKGNAME="$PKGNAME_PART-$(uname -m)"
          mkdir $PKGNAME
          echo "::set-output name=name::$PKGNAME"
          echo "::set-output name=path::./$PKGNAME"

      - name: Generate C bindings
        run: >
          cbindgen -l=c --crate=${{ matrix.crate.name }}
          -o ${{ steps.dist.outputs.path }}/include/${{ matrix.crate.name }}.h
          ${{ matrix.crate.path }}/${{ matrix.crate.mod }}

      - name: move lib to dist
        run: >
          mv
          ./target/release/${{ matrix.os.lib-pre }}${{ matrix.crate.name }}.${{ matrix.os.lib-ext }}
          ${{ steps.dist.outputs.path }}/

      - name: add build info
        run: |
          uname -a > ${{ steps.dist.outputs.path }}/build-info.txt
          rustc -V >> ${{ steps.dist.outputs.path }}/build-info.txt
          cbindgen -V >> ${{ steps.dist.outputs.path }}/build-info.txt

      - id: archive
        name: archive
        uses: ./.github/actions/archive
        with:
          name: ${{ steps.dist.outputs.name }}
          path: ${{ steps.dist.outputs.path }}

      - name: Upload artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./${{ steps.archive.outputs.name }}
          asset_name: ${{ steps.archive.outputs.name }}
          asset_content_type: application/gzip
